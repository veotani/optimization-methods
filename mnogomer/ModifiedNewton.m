function [x, iter, oi] = ModifiedNewton(x0)
%модифицированный метод ньютона
eps = 0.05; iter = 0; oi = 0;
f = @(x) x(1)^2 + 2*x(2)^2 + x(1)^2*x(2)^2 + 2*x(3) + exp(x(2)^2 + x(3)^2) - x(2);
f1 = @(x) [ 2*x(1) + 2*x(1)*x(2)^2;
            4*x(2) + 2*x(1)^2*x(2) + 2*x(2)*exp(x(2)^2 + x(3)^2) - 1;
            2 + 2*x(3)*exp(x(2)^2 + x(3)^2)];
f2 = @(x) [ 2+2*x(2)^2 4*x(1)*x(2) 0;
            4*x(1)*x(2) 4 + 2*x(1)^2 + 2*exp(x(2)^2 + x(3)^2) + 4*x(2)^2*exp(x(2)^2 + x(3)^2) 4*x(2)*x(3)*exp(x(2)^2 + x(3)^2);
            0 4*x(2)*x(3)*exp(x(2)^2 + x(3)^2) 2*exp(x(2)^2 + x(3)^2)+4*x(3)^2*exp(x(2)^2 + x(3)^2)];
fun = f1(x0);
while ((fun(1)^2+fun(2)^2+fun(3)^2)^(1/2) > eps)
    fun = f2(x0);
    fun = inv(fun);
    fa = @(a) f(x0 - a.*fun*f1(x0));
    [alpha,o] = fibon(fa);
    oi = oi + o;
    x0 = x0 - alpha*fun*f1(x0);
    fun = f1(x0);
    iter = iter +1;
end
x = x0;
%4 итерации с решением задачи одномерной минимизации на каждой. результат
%уже лучше, но приходится искать Гессиан.
end
